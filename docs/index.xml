<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Documentation on</title><link>https://dekart.xyz/docs/</link><description>Recent content in Documentation on</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Tue, 06 Oct 2020 08:48:23 +0000</lastBuildDate><atom:link href="https://dekart.xyz/docs/index.xml" rel="self" type="application/rss+xml"/><item><title>Google App Engine</title><link>https://dekart.xyz/docs/self-hosting/app-engine/</link><pubDate>Mon, 22 Feb 2021 08:24:45 +0100</pubDate><guid>https://dekart.xyz/docs/self-hosting/app-engine/</guid><description>Prerequisites Google Cloud Project BigQuery API Enabled Mapbox Token In this guide you will create:
Cloud SQL DB Cloud Storage Bucket App Engine App (Flexible environment) Configure Access to specific Google Accounts with Google IAP Steps Create db instance gcloud sql instances create ${DB_INSTANCE_NAME} \ --database-version=POSTGRES_12 \ --tier=db-f1-micro\ --region=europe-west1 Create database gcloud sql databases create dekart --instance=${DB_INSTANCE_NAME} Set password; can be not secret, because there is one more layer of encryption and authorization in Cloud SQL gcloud sql users set-password postgres --instance=${DB_INSTANCE_NAME} --password=dekart Create storage gsutil mb -b on -l europe-west1 gs://${BUCKET}/ Create App Engine App gcloud app create --region=europe-west Create Dockerfile</description></item><item><title>Amazon ECS</title><link>https://dekart.xyz/docs/self-hosting/aws-ecs-terraform/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dekart.xyz/docs/self-hosting/aws-ecs-terraform/</guid><description>Prerequisites AWS Credentials and Terraform installed Route 53 zone where Dekart will be hosted in subdomains Mapbox Token Athena Catalog, example adding OpenStreetMap Cognito User Pool, example with Cognito and Google SSO Resources Resources created in this guide
network configuration (VPC, public and private subnets) security groups roles RDS db instance S3 bucket (for query storage and results cache) load balancer including HTTPS and SSO with Cognito ECS cluster, service, and task running on FARGATE Setup with Terraform Basics Before we can start talking to an AWS account, we have to set up the Terraform provider:</description></item><item><title>Docker</title><link>https://dekart.xyz/docs/self-hosting/docker/</link><pubDate>Mon, 22 Feb 2021 08:24:45 +0100</pubDate><guid>https://dekart.xyz/docs/self-hosting/docker/</guid><description>AWS Athena Prerequisites AWS Account AWS Athena Workspace AWS S3 bucket PostgreSQL Service account credentials with access to all above Mapbox Token Running docker docker run \ -e AWS_REGION=${AWS_REGION} \ -e AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID} \ -e AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY} \ -e DEKART_POSTGRES_DB=${DEKART_POSTGRES_DB} \ -e DEKART_POSTGRES_USER=${DEKART_POSTGRES_USER} \ -e DEKART_POSTGRES_PASSWORD=${DEKART_POSTGRES_PASSWORD} \ -e DEKART_POSTGRES_PORT=${DEKART_POSTGRES_PORT} \ -e DEKART_POSTGRES_HOST=host.docker.internal \ -e DEKART_STORAGE=S3 \ -e DEKART_DATASOURCE=ATHENA \ -e DEKART_CLOUD_STORAGE_BUCKET=${DEKART_CLOUD_STORAGE_BUCKET} \ -e DEKART_ATHENA_CATALOG=${DEKART_ATHENA_CATALOG} \ -e DEKART_ATHENA_S3_OUTPUT_LOCATION=${DEKART_ATHENA_S3_OUTPUT_LOCATION} \ -e DEKART_MAPBOX_TOKEN=${DEKART_MAPBOX_TOKEN} \ -e DEKART_CORS_ORIGIN=${DEKART_CORS_ORIGIN} \ -p 8080:8080 \ dekartxyz/dekart:0.</description></item><item><title>Docker Compose</title><link>https://dekart.xyz/docs/self-hosting/docker-compose/</link><pubDate>Mon, 22 Feb 2021 08:24:45 +0100</pubDate><guid>https://dekart.xyz/docs/self-hosting/docker-compose/</guid><description>AWS Athena Prerequisites AWS Account AWS Athena Workspace AWS S3 bucket PostgreSQL Service account credentials with access to all above Mapbox Token Steps Copy docker-compose.yaml file Create .env file POSTGRES_PASSWORD= PROJECT_ID= CLOUD_STORAGE_BUCKET= MAPBOX_TOKEN= DEKART_ATHENA_CATALOG= DEKART_ATHENA_S3_OUTPUT_LOCATION= AWS_REGION= AWS_ACCESS_KEY_ID= AWS_SECRET_ACCESS_KEY= Run docker-compose --env-file .env up dekart-athena BigQuery Prerequisites Google Cloud Project BigQuery API Enabled Cloud Storage Bucket Service account credentials with access to all above Mapbox Token Steps Copy docker-compose.yaml file Create .</description></item><item><title>Upgrade to new version</title><link>https://dekart.xyz/docs/self-hosting/upgrade/</link><pubDate>Mon, 22 Feb 2021 08:24:45 +0100</pubDate><guid>https://dekart.xyz/docs/self-hosting/upgrade/</guid><description>Before you begin: it is always recommended to backup your postgres database before upgrading Dekart. On the first run Dekart applies migrations to database and you won't be able to downgrade. For all Docker based deployments, update docker tag, for example:
dekartxyz/dekart:0.10 -&amp;gt; dekartxyz/dekart:0.11
Configure DEKART_CORS_ORIGIN environment variable to ensure security of your instance and prevent warnings in logs.
Then redeploy application
Migration instructions There is no breaking configuration changes in version 0.</description></item><item><title>Build from Source</title><link>https://dekart.xyz/docs/self-hosting/from-source/</link><pubDate>Mon, 22 Feb 2021 08:24:45 +0100</pubDate><guid>https://dekart.xyz/docs/self-hosting/from-source/</guid><description>Prerequisites Google Cloud Project BigQuery API Enabled Cloud Storage Bucket Service account credentials with access to all above Mapbox Token GitHub Account and GitHub Token Steps Checkout Dekart from GitHub; navigate to project directory;
Get your
Create .npmrc file in the project directory with the following content and your github token
//npm.pkg.github.com/:_authToken=YOUR_GITHUB_TOKEN @dekart-xyz:registry=https://npm.pkg.github.com This step is required because dekart is using github packages
Install frontend dependencies npm install Create and edit .</description></item><item><title>Environment Variables</title><link>https://dekart.xyz/docs/configuration/environment-variables/</link><pubDate>Mon, 22 Feb 2021 07:48:05 +0100</pubDate><guid>https://dekart.xyz/docs/configuration/environment-variables/</guid><description>Dekart deployment requires:
Postgres DB (like Cloud SQL) to store metadata Mapbox token to load the map For BigQuery data source:
access to BigQuery API Cloud Storage or S3 bucket where query results are stored For AWS Athena:
access to AWS Athena workspace S3 bucket where query results are stored Optionally, secure deployment with Google IAP. You have 2 options:
Just configure Google IAP (for example for App Engine deployment) Additionally enable user authentication with Google IAP to isolate user permissions Main configuration Name Description DEKART_MAPBOX_TOKEN Mapbox Token to show a map DEKART_POSTGRES_DB Database name.</description></item><item><title>BigQuery Playground</title><link>https://dekart.xyz/docs/about/playground/</link><pubDate>Sun, 21 Feb 2021 09:17:56 +0100</pubDate><guid>https://dekart.xyz/docs/about/playground/</guid><description>You can try Dekart on play.dekart.xyz (requires Gmail Account) with one of many Public Datasets available on BigQuery.
Go to BigQuery Playground
BigQuery Public Datasets and Even More Datasets
Quick Start Go to play.dekart.xyz
Authorize with Gmail Account. Dekart Playground access only your email to store Maps you created on Playground. Emails are not used for any marketing purposes. You are not charge for anything.
Click Create Report
Type example query (uses Chicago Crime Data) SELECT primary_type, district, latitude, longitude, date from `bigquery-public-data.</description></item><item><title>Use with Your Data</title><link>https://dekart.xyz/docs/about/your-datasets/</link><pubDate>Sun, 21 Feb 2021 09:17:56 +0100</pubDate><guid>https://dekart.xyz/docs/about/your-datasets/</guid><description>With Dekart you can query and visualize private datasets using BigQuery and AWS Athena. For this you can self-host Dekart instance (open-source, MIT License GitHub) on your Google Cloud or AWS account:
Running Dekart on Google App Engine Running Dekart on Amazon ECS Running Dekart with Docker Secure your Dekart instance with SSO On Google Cloud: configure Google IAP for your deployment
On Amazon: configure load balancer to authorize using Cognito for your deployment</description></item><item><title>Dekart Screencast</title><link>https://dekart.xyz/docs/about/screencast/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dekart.xyz/docs/about/screencast/</guid><description>Querying Chicago Crime Dataset from BigQuery Public Data Try Live on Playground
Use with Private Datasets</description></item></channel></rss>