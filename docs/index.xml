<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Documentation on</title><link>/docs/</link><description>Recent content in Documentation on</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Tue, 06 Oct 2020 08:48:23 +0000</lastBuildDate><atom:link href="/docs/index.xml" rel="self" type="application/rss+xml"/><item><title>Google App Engine</title><link>/docs/self-hosting/app-engine/</link><pubDate>Mon, 22 Feb 2021 08:24:45 +0100</pubDate><guid>/docs/self-hosting/app-engine/</guid><description>Prerequisites Google Cloud Project BigQuery API Enabled Mapbox Token In this guide you will create:
Cloud SQL DB Cloud Storage Bucket App Engine App (Flexible environment) Configure Access to specific Google Accounts with Google IAP Steps Create db instance gcloud sql instances create ${DB_INSTANCE_NAME} \ --database-version=POSTGRES_12 \ --tier=db-f1-micro\ --region=europe-west1 Create database gcloud sql databases create dekart --instance=${DB_INSTANCE_NAME} Set password; can be not secret, because there is one more layer of encryption and authorization in Cloud SQL gcloud sql users set-password postgres --instance=${DB_INSTANCE_NAME} --password=dekart Create storage gsutil mb -b on -l europe-west1 gs://${BUCKET}/ Create App Engine App gcloud app create --region=europe-west Create Dockerfile</description></item><item><title>Docker</title><link>/docs/self-hosting/docker/</link><pubDate>Mon, 22 Feb 2021 08:24:45 +0100</pubDate><guid>/docs/self-hosting/docker/</guid><description>Prerequisites Google Cloud Project BigQuery API Enabled Cloud SQL DB (Postgres) Cloud Storage Bucket Service account credentials with access to all above Mapbox Token Running docker docker run \ -v ${GOOGLE_APPLICATION_CREDENTIALS}:${GOOGLE_APPLICATION_CREDENTIALS} \ -e GOOGLE_APPLICATION_CREDENTIALS=${GOOGLE_APPLICATION_CREDENTIALS} \ -e DEKART_POSTGRES_DB=${DEKART_POSTGRES_DB} \ -e DEKART_POSTGRES_USER=${DEKART_POSTGRES_USER} \ -e DEKART_POSTGRES_PASSWORD=${DEKART_POSTGRES_PASSWORD} \ -e DEKART_POSTGRES_PORT=${DEKART_POSTGRES_PORT} \ -e DEKART_POSTGRES_HOST=${DEKART_POSTGRES_HOST} \ -e DEKART_CLOUD_STORAGE_BUCKET=${DEKART_CLOUD_STORAGE_BUCKET} \ -e DEKART_BIGQUERY_PROJECT_ID=${DEKART_BIGQUERY_PROJECT_ID} \ -e DEKART_MAPBOX_TOKEN=${DEKART_MAPBOX_TOKEN} \ -p 8080:8080 \ dekartxyz/dekart:0.</description></item><item><title>Docker Compose</title><link>/docs/self-hosting/docker-compose/</link><pubDate>Mon, 22 Feb 2021 08:24:45 +0100</pubDate><guid>/docs/self-hosting/docker-compose/</guid><description>Prerequisites Google Cloud Project BigQuery API Enabled Cloud Storage Bucket Service account credentials with access to all above Mapbox Token Steps Copy docker-compose.yaml file Create .env file POSTGRES_PASSWORD= PROJECT_ID= CLOUD_STORAGE_BUCKET= MAPBOX_TOKEN= GOOGLE_APPLICATION_CREDENTIALS= Run docker-compose --env-file .env up</description></item><item><title>Build from Source</title><link>/docs/self-hosting/from-source/</link><pubDate>Mon, 22 Feb 2021 08:24:45 +0100</pubDate><guid>/docs/self-hosting/from-source/</guid><description>Prerequisites Google Cloud Project BigQuery API Enabled Cloud Storage Bucket Service account credentials with access to all above Mapbox Token Steps Checkout Dekart from GitHub; navigate to project directory;
Install frontend dependencies
npm install Create and edit .env; see environment variables for details cp .env.example .env Run Postgres DB locally docker-compose --env-file .env up Run Server; you will need to install godotenv or handle environment variable otherwise godotenv -f .</description></item><item><title>Environment Variables</title><link>/docs/configuration/environment-variables/</link><pubDate>Mon, 22 Feb 2021 07:48:05 +0100</pubDate><guid>/docs/configuration/environment-variables/</guid><description>Production configuration Name Description DEKART_BIGQUERY_PROJECT_ID Unique identifier for your Google Cloud project with BigQuery API Enabled. Example: my-project DEKART_CLOUD_STORAGE_BUCKET Google Cloud Storage bucket name where Dekart Query results will be stored. Example: dekart-bucket DEKART_MAPBOX_TOKEN Mapbox Token to show a map DEKART_POSTGRES_DB Database name. Dekart needs Postgres Database to store query meta information. Example: dekart DEKART_POSTGRES_HOST Example: localhost DEKART_POSTGRES_PORT Example: 5432 DEKART_POSTGRES_USER Example: postgres DEKART_POSTGRES_PASSWORD Example: ****** DEKART_PORT Example: 8080 GOOGLE_APPLICATION_CREDENTIALS Credentials for Google Cloud API Example: /.</description></item></channel></rss>