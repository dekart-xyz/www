<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Documentation on</title><link>https://dekart.xyz/docs/</link><description>Recent content in Documentation on</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Tue, 06 Oct 2020 08:48:23 +0000</lastBuildDate><atom:link href="https://dekart.xyz/docs/index.xml" rel="self" type="application/rss+xml"/><item><title>Google App Engine</title><link>https://dekart.xyz/docs/self-hosting/app-engine/</link><pubDate>Mon, 22 Feb 2021 08:24:45 +0100</pubDate><guid>https://dekart.xyz/docs/self-hosting/app-engine/</guid><description>Prerequisites Google Cloud Project BigQuery API Enabled Mapbox Token In this guide you will create:
Cloud SQL DB Cloud Storage Bucket App Engine App (Flexible environment) Configure Access to specific Google Accounts with Google IAP Steps Create db instance gcloud sql instances create ${DB_INSTANCE_NAME} \ --database-version=POSTGRES_12 \ --tier=db-f1-micro\ --region=europe-west1 Create database gcloud sql databases create dekart --instance=${DB_INSTANCE_NAME} Set password; can be not secret, because there is one more layer of encryption and authorization in Cloud SQL gcloud sql users set-password postgres --instance=${DB_INSTANCE_NAME} --password=dekart Create storage gsutil mb -b on -l europe-west1 gs://${BUCKET}/ Create App Engine App gcloud app create --region=europe-west Create Dockerfile</description></item><item><title>Amazon ECS</title><link>https://dekart.xyz/docs/self-hosting/aws-ecs-terraform/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dekart.xyz/docs/self-hosting/aws-ecs-terraform/</guid><description>Prerequisites AWS Credentials and Terraform installed Route 53 zone where Dekart will be hosted in subdomains Mapbox Token Athena Catalog, example adding OpenStreetMap Cognito User Pool, example with Cognito and Google SSO Resources Resources created in this guide
network configuration (VPC, public and private subnets) security groups roles RDS db instance S3 bucket (for query storage and results cache) load balancer including HTTPS and SSO with Cognito ECS cluster, service, and task running on FARGATE Setup with Terraform Basics Before we can start talking to an AWS account, we have to set up the Terraform provider:</description></item><item><title>Docker</title><link>https://dekart.xyz/docs/self-hosting/docker/</link><pubDate>Mon, 22 Feb 2021 08:24:45 +0100</pubDate><guid>https://dekart.xyz/docs/self-hosting/docker/</guid><description>Requirements Google Cloud Storage or AWS S3 bucket for storing cache PostgreSQL or similar (Cloud SQL, Amazon RDS, etc) Mapbox Token Supported data warehouses Amazon Athena Google BigQuery Snowflake Amazon Athena docker run \ -e AWS_REGION=${AWS_REGION} \ -e AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID} \ -e AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY} \ -e DEKART_POSTGRES_DB=${DEKART_POSTGRES_DB} \ -e DEKART_POSTGRES_USER=${DEKART_POSTGRES_USER} \ -e DEKART_POSTGRES_PASSWORD=${DEKART_POSTGRES_PASSWORD} \ -e DEKART_POSTGRES_PORT=${DEKART_POSTGRES_PORT} \ -e DEKART_POSTGRES_HOST=host.docker.internal \ -e DEKART_STORAGE=S3 \ -e DEKART_DATASOURCE=ATHENA \ -e DEKART_CLOUD_STORAGE_BUCKET=${DEKART_CLOUD_STORAGE_BUCKET} \ -e DEKART_ATHENA_CATALOG=${DEKART_ATHENA_CATALOG} \ -e DEKART_ATHENA_S3_OUTPUT_LOCATION=${DEKART_ATHENA_S3_OUTPUT_LOCATION} \ -e DEKART_MAPBOX_TOKEN=${DEKART_MAPBOX_TOKEN} \ -e DEKART_CORS_ORIGIN=${DEKART_CORS_ORIGIN} \ -p 8080:8080 \ dekartxyz/dekart:0.</description></item><item><title>Docker Compose</title><link>https://dekart.xyz/docs/self-hosting/docker-compose/</link><pubDate>Mon, 22 Feb 2021 08:24:45 +0100</pubDate><guid>https://dekart.xyz/docs/self-hosting/docker-compose/</guid><description>AWS Athena Prerequisites AWS Account AWS Athena Workspace AWS S3 bucket PostgreSQL Service account credentials with access to all above Mapbox Token Steps Copy docker-compose.yaml file Create .env file DEKART_POSTGRES_PASSWORD= DEKART_PROJECT_ID= DEKART_CLOUD_STORAGE_BUCKET= DEKART_MAPBOX_TOKEN= DEKART_ATHENA_CATALOG= DEKART_ATHENA_S3_OUTPUT_LOCATION= AWS_REGION= AWS_ACCESS_KEY_ID= AWS_SECRET_ACCESS_KEY= DEKART_CORS_ORIGIN= Run docker-compose --env-file .env up dekart-athena BigQuery Prerequisites Google Cloud Project BigQuery API Enabled Cloud Storage Bucket Service account credentials with access to all above Mapbox Token Steps Copy docker-compose.yaml file Create .</description></item><item><title>Upgrade to new version</title><link>https://dekart.xyz/docs/self-hosting/upgrade/</link><pubDate>Mon, 22 Feb 2021 08:24:45 +0100</pubDate><guid>https://dekart.xyz/docs/self-hosting/upgrade/</guid><description>Before you begin: it is always recommended to back up your Postgres database before upgrading Dekart. On the first run, Dekart applies migrations to the database and you won't be able to downgrade. For all Docker-based deployments, update the docker tag, for example dekartxyz/dekart:0.16-&amp;gt;dekartxyz/dekart:0.17`
Migration instructions dekartxyz/dekart:0.16 -&amp;gt; dekartxyz/dekart:0.17 No breaking changes, just update the docker tag. New Postgres migrations will be applied on the first run.
Note, after update private reports will not be available to other users.</description></item><item><title>Build from Source</title><link>https://dekart.xyz/docs/self-hosting/from-source/</link><pubDate>Mon, 22 Feb 2021 08:24:45 +0100</pubDate><guid>https://dekart.xyz/docs/self-hosting/from-source/</guid><description>Prerequisites Google Cloud Project BigQuery API Enabled Cloud Storage Bucket Service account credentials with access to all above Mapbox Token GitHub Account and GitHub Token Steps Checkout Dekart from GitHub; navigate to project directory;
Get your
Create .npmrc file in the project directory with the following content and your github token
//npm.pkg.github.com/:_authToken=YOUR_GITHUB_TOKEN @dekart-xyz:registry=https://npm.pkg.github.com This step is required because dekart is using github packages
Install frontend dependencies npm install Create and edit .</description></item><item><title>BigQuery Overture Maps Examples</title><link>https://dekart.xyz/docs/about/overture-maps-examples/</link><pubDate>Wed, 28 Aug 2024 07:26:19 +0200</pubDate><guid>https://dekart.xyz/docs/about/overture-maps-examples/</guid><description>Collection of kepler.gl maps created from Overture Data in BigQuery public dataset using BigQuery SQL and Dekart. Each example includes a SQL query and a visualized map.
All examples are created with Overture Maps GPT
Get it Free
Segment The Overture Maps segment table represents paths, roads, and transportation segments, storing their geospatial data as LineStrings along with attributes like class, surface, speed limits, and access restrictionsâ€‹.
Nevada Roads by Speed and Class View interactive map -- Step 1: Get the geometry of Nevada WITH nevada_geometry AS ( SELECT geometry FROM `bigquery-public-data.</description></item><item><title>Snowflake Kepler.gl Maps Examples</title><link>https://dekart.xyz/docs/about/snowflake-kepler-gl-examples/</link><pubDate>Wed, 28 Aug 2024 07:26:19 +0200</pubDate><guid>https://dekart.xyz/docs/about/snowflake-kepler-gl-examples/</guid><description>Collection of kepler.gl maps created from Overture Data in Snowflake public dataset using SQL and Dekart.
Overture Maps Nevada Roads by Speed and Class View interactive map -- Step 1: Get the geometry of Nevada WITH nevada_geometry AS ( SELECT geometry FROM OVERTURE_MAPS__DIVISIONS.CARTO.DIVISION_AREA WHERE country = &amp;#39;US&amp;#39; AND region = &amp;#39;US-NV&amp;#39; AND subtype = &amp;#39;region&amp;#39; ) -- Step 2: Select roads within Nevada with non-empty speed limits SELECT ST_ASWKT(s.geometry) AS geometry, s.</description></item><item><title>BigQuery Kepler.gl Maps Examples</title><link>https://dekart.xyz/docs/about/kepler-gl-map-examples/</link><pubDate>Tue, 21 May 2024 07:13:05 +0200</pubDate><guid>https://dekart.xyz/docs/about/kepler-gl-map-examples/</guid><description>Dekart allows user create and share Kepler.gl maps from private and public BigQuery datasets, using SQL. It works particularly well with BigQuery GIS functions.
Population density Visualize population density anywhere in the world and at any level of detail
EU Population Density View interactive map -- CTE for retrieving the latest population data for each geo_id in specified countries WITH latest_population AS ( SELECT geo_id, MAX(last_updated) AS last_updated -- Finds the most recent update date for each geo_id FROM `bigquery-public-data.</description></item><item><title>Examples with Public Datasets</title><link>https://dekart.xyz/docs/about/public-dataset-examples/</link><pubDate>Tue, 21 May 2024 07:13:05 +0200</pubDate><guid>https://dekart.xyz/docs/about/public-dataset-examples/</guid><description>Learn how to use BigQuery SQL to visualize spatial datasets. Below are some examples of public datasets that you can explore and visualize with Dekart.
Large datasets Explore large datasets with millions of rows and visualize them on a map
All (400k) Toronto Buildings (100Mb) 1M points (30Mb) All ramps in Illinois Population density Visualize population density anywhere in the world and at any level of detail
Population over 10k EU Population Density Berlin Population Density OpenStreetMap Export OpenStreetMap data</description></item></channel></rss>